pipeline {   
    agent any

    environment{
        ANSIBLE_SERVER = "167.71.181.151"
        AWS_REGION = 'us-east-2'
    }
   
    stages {        
        stage("copy files to ansible server") {
            steps {
                script {
                   echo "copying all neccesary files to ansible server"
                   dir('java-maven-app'){

                        sshagent(['ansible-server-key']){  

                            //copying ansible files to remote droplet (ansible server)
                            //Files: inventory, playbook, cfg                      
                            sh "scp -o StrictHostKeyChecking=no ansible/* root@${ANSIBLE_SERVER}:/root"

                            //Saving AWS PEM file in the keyfile variable
                            // keyFileVariable --> Creates a temporary file with the credentials, then this file is copied to the ansible server
                            withCredentials([sshUserPrivateKey(credentialsId: 'ansible-ec2-key', keyFileVariable: 'keyfile', usernameVariable: 'user')]) {
                                //insecure because with "" groovy exposes the pem file in command line
                                //sh "scp ${keyfile} root@${ANSIBLE_SERVER}:/root/ssh-key.pem"
                                //with single '', groovy uses the secret in a different way and does not exposes file.
                                sh 'scp $keyfile root@$ANSIBLE_SERVER:/root/ssh-key.pem'
                            }                 

                        }
                   }

                }
            }
        }


        stage("execute ansible playbook"){
            steps{
                script{
                   echo "executing ansible playbook to configure ec2" 

                    //using ssh pipeline plugin
                    //Defining remote object
                    def remote = [:]
                    remote.name = "ansible-server"
                    remote.host = "${ANSIBLE_SERVER}"
                    remote.allowAnyHosts = true

                     
                    withCredentials([
                        //using credentials to access ansible server
                        sshUserPrivateKey(credentialsId: 'ansible-server-key', keyFileVariable: 'keyfile', usernameVariable: 'user'),

                        //using credenrials from AWS plugin
                        aws(credentialsId: 'unicorn-aws-credentials', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')

                    ]){
                            remote.user = user
                            remote.identityFile = keyfile
                            sshCommand remote: remote, command: "ls -l"

                            // Step 3a: Create .aws directory and write credentials securely
                            def awsCredentials = """[default]
                                                    aws_access_key_id=${AWS_ACCESS_KEY_ID}
                                                    aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}
                                                    region=${AWS_REGION}
                                                    """
                            writeFile file: 'aws-credentials', text: awsCredentials

                            // Step 3b: Copy credentials to droplet
                            sshagent(['ansible-server-key']) {
                                sh "scp -o StrictHostKeyChecking=no aws-credentials root@${ANSIBLE_SERVER}:/root/.aws/credentials"
                                sh "rm -f aws-credentials"
                            }

                            // Step 3c: Continue execution
                            sshCommand remote: remote, command: "chmod 600 /root/.aws/credentials"


                            sshScript remote: remote, script: "java-maven-app/prepare-ansible-server.sh"
                            sshCommand remote: remote, command: "ansible-playbook my-playbook.yaml"
                        }
                }
            }
        }
    }
}
 
